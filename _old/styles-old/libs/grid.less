//////////////////////////
// Wernecks Semantic.gs // for LESS: http://lesscss.org/
//////////////////////////

//TODO criar leftAnchore rightAnchor > 1 param coluna que quer, 2 param distancia a partir dela

// Defaults which you can freely override
@column-width: 60;
@gutter-width: 20;
@columns: 12;

// Utility variable â€” you should never need to modify this
@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/noticias/2012/01/05/subpixel-rounding.html
// @min-width: 960;
// @correction: 0.5 / @min-width * 100 * 1%;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
  *zoom:1;
  
  &:before,
  &:after {
      content:"";
      display:table;
  }
  &:after {
      clear:both;
  }
}

//////////
// GRID //
//////////

body {
  width: 100%;
  .clearfix;
}
.grid_container() {
  width: @total-width;
  margin: auto;
}
/* Forma como era feito antes
.row(@columns:@columns) {
  display: block;
  width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
  margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
  // *width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width)-@correction;
  // *margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1)-@correction;
  .clearfix;
}
*/
.row(@columns:@columns) {
  display: block;
  float:left;
  clear: none;
  width: @total-width*((((@gutter-width+@column-width)*@columns)) / @gridsystem-width);
  margin: 0;
  // *width: @total-width*((((@gutter-width+@column-width)*@columns)-@gutter-width) / @gridsystem-width)-@correction;
  // *margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1)-@correction;
  .clearfix;
}
.r_row(@columns:@columns, @diff) { //relative started position cols
  display: block;
  float:left;
  clear: none;
  width: @total-width*((((@gutter-width+@column-width)*@columns)) / @gridsystem-width) + @diff;
  margin: 0 - @diff;
  // *width: @total-width*((((@gutter-width+@column-width)*@columns)-@gutter-width) / @gridsystem-width)-@correction;
  // *margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1)-@correction;
}
.cols(@x) when (@x > 0){
//  display: block;
  float: left;
  clear: none;
  width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
  margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
  // *width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width)-@correction;
  // *margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width)-@correction;
}
.cols(@x) when (@x = 0){
  display: inline-block;
  float: left;
  clear: none;
  margin: 0;
  width: 0;
  padding: 0;
}
.cols(@x) when (@x = 'auto'){
  display: inline-block;
  float: left;
  clear: none;
  margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
  width: auto;
}
.r_cols(@x, @diff) { //relative started position cols
  display: inline;
  float: left;
  clear: none;
  width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width) + @diff;
  margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width) - @diff;
  // *width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width)-@correction;
  // *margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width)-@correction;
}
.b_cols(@border, @x,@columns:@columns) {
  display: block;
  float: left;
  clear: none;
  width: (@total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width)) - @border*2;
  margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
  // *width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width)-@correction;
  // *margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width)-@correction;
}
.first() {
  clear:left;
}
.last() {
  .clearfix();
}
.push(@offset:1) {
  margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.pull(@offset:1) {
  margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}

.expand(@pixels) {
  padding-left:   @pixels;
  padding-right:  @pixels;
  margin-left:   -@pixels;
  margin-right:  -@pixels;
}
